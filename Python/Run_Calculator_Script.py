import dose_calculator as dc
import pickle
import numpy as np
from coorform import coorform

# for a CT array of (Nx-1,Ny-1,Nz-1) voxels
Nx = 229
Ny = 131
Nz = 116

# distances between the x,y,z planes (also the lengths of the sides of the voxels) in cm
dx = 0.251
dy = 0.251
dz = 0.25

# initial and final coordinates of the beam
# x1,x2 = (0,0)
# y1,y2 = (0,0)
# z1,z2 = (-(Nz-1)*dz/2-7,(Nz-1)*dz/2-7)
x1,x2 = (0,0)
y1,y2 = (-(Ny-1)*dy/2,(Ny-1)*dy/2)
z1,z2 = (0,0)

# adjustment from center 
# adjust = 0.249
# how_far = 57
# all_adjust = np.linspace(-how_far*adjust,how_far*adjust,2*how_far+1)
# # all_adjust = [0,-adjust,-2*adjust,-3*adjust,-4*adjust,-5*adjust,-6*adjust,adjust,2*adjust,3*adjust,4*adjust,5*adjust,6*adjust]
# # all_adjust = [-adjust,adjust]
# # xadj,yadj = np.meshgrid([-adjust,adjust],all_adjust)
# xadj,yadj = np.meshgrid(0,all_adjust)
# xadj,yadj = xadj.flatten(),yadj.flatten()

# rays = []
# for n in range(len(xadj)):
#     rays.append(((x1+xadj[n],x2+xadj[n]),(y1,y2),(z1+yadj[n],z2+yadj[n])))

rays = [((0, 0), (-2.5, 2.5), (14.193, 14.193))]

# rays = []
# for n in range(len(xadj)):
#     rays.append(((x1+xadj[n],x2+xadj[n]),(y1+yadj[n],y2+yadj[n]),(z1,z2)))

# initial plane coordinates (cm)
xplane1 = -(Nx-1)*dx/2
yplane1 = -(Ny-1)*dy/2
zplane1 = -(Nz-1)*dz/2

# beam info and filename
# beam_energy = [0.120] # in MeV
beam_energy = [0.00125, 0.00175, 0.00225, 0.00275, 0.00325, 0.00375, 0.00425, 0.00475, 0.00525, 0.00575, 0.00625, 0.00675, 0.00725, 0.00775, 0.00825, 0.00875, 0.00925, 0.00975, 0.01025, 0.01075, 0.01125, 0.01175, 0.01225, 0.01275, 0.01325, 0.01375, 0.01425, 0.01475, 0.01525, 0.01575, 0.01625, 0.01675, 0.01725, 0.01775, 0.01825, 0.01875, 0.01925, 0.01975, 0.02025, 0.02075, 0.02125, 0.02175, 0.02225, 0.02275, 0.02325, 0.02375, 0.02425, 0.02475, 0.02525, 0.02575, 0.02625, 0.02675, 0.02725, 0.02775, 0.02825, 0.02875, 0.02925, 0.02975, 0.03025, 0.03075, 0.03125, 0.03175, 0.03225, 0.03275, 0.03325, 0.03375, 0.03425, 0.03475, 0.03525, 0.03575, 0.03625, 0.03675, 0.03725, 0.03775, 0.03825, 0.03875, 0.03925, 0.03975, 0.04025, 0.04075, 0.04125, 0.04175, 0.04225, 0.04275, 0.04325, 0.04375, 0.04425, 0.04475, 0.04525, 0.04575, 0.04625, 0.04675, 0.04725, 0.04775, 0.04825, 0.04875, 0.04925, 0.04975, 0.05025, 0.05075, 0.05125, 0.05175, 0.05225, 0.05275, 0.05325, 0.05375, 0.05425, 0.05475, 0.05525, 0.05575, 0.05625, 0.05675, 0.05725, 0.05775, 0.05825, 0.05875, 0.05925, 0.05975, 0.06025, 0.06075, 0.06125, 0.06175, 0.06225, 0.06275, 0.06325, 0.06375, 0.06425, 0.06475, 0.06525, 0.06575, 0.06625, 0.06675, 0.06725, 0.06775, 0.06825, 0.06875, 0.06925, 0.06975, 0.07025, 0.07075, 0.07125, 0.07175, 0.07225, 0.07275, 0.07325, 0.07375, 0.07425, 0.07475, 0.07525, 0.07575, 0.07625, 0.07675, 0.07725, 0.07775, 0.07825, 0.07875, 0.07925, 0.07975, 0.08025, 0.08075, 0.08125, 0.08175, 0.08225, 0.08275, 0.08325, 0.08375, 0.08425, 0.08475, 0.08525, 0.08575, 0.08625, 0.08675, 0.08725, 0.08775, 0.08825, 0.08875, 0.08925, 0.08975, 0.09025, 0.09075, 0.09125, 0.09175, 0.09225, 0.09275, 0.09325, 0.09375, 0.09425, 0.09475, 0.09525, 0.09575, 0.09625, 0.09675, 0.09725, 0.09775, 0.09825, 0.09875, 0.09925, 0.09975, 0.10025, 0.10075, 0.10125, 0.10175, 0.10225, 0.10275, 0.10325, 0.10375, 0.10425, 0.10475, 0.10525, 0.10575, 0.10625, 0.10675, 0.10725, 0.10775, 0.10825, 0.10875, 0.10925, 0.10975, 0.11025, 0.11075, 0.11125, 0.11175, 0.11225, 0.11275, 0.11325, 0.11375, 0.11425, 0.11475, 0.11525, 0.11575, 0.11625, 0.11675, 0.11725, 0.11775, 0.11825, 0.11875, 0.11925, 0.11975]
# fluence_0 = [3.183098862 * 10**8] # photon/cm^2
fluence_0 = 2000000/(0.45*1.35)*np.array([1.4557031261560797e-282, 0.0, 0.0, 0.0, 3.0686353064672666e-299, 1.7357535282999887e-203, 1.1597637644715565e-144, 1.0828547800603692e-106, 4.570473199237931e-81, 3.7168293002060585e-63, 3.001791936709609e-50, 9.847068137250953e-41, 2.7409764563384364e-33, 4.871398915464017e-28, 1.672097192544311e-22, 2.960361430821154e-20, 1.3629410169045483e-17, 2.956676046220569e-14, 1.0196838089199941e-13, 1.8545814091452305e-12, 8.822456822648242e-11, 3.86152508302196e-10, 2.014273288602338e-09, 1.0777796346346943e-08, 4.999326259100402e-08, 1.884642509959187e-07, 5.973177583711483e-07, 1.6365576512661629e-06, 3.9591960384152735e-06, 8.618195650269787e-06, 1.7160472984746514e-05, 3.164630302667217e-05, 5.46104141251044e-05, 8.874863135192399e-05, 0.00013691784544731095, 0.00020225045486876793, 0.0002875471992122865, 0.00039521822961260044, 0.0005262056380514617, 0.0006812543490955138, 0.0008616572884396423, 0.0010673456106904387, 0.0012951770619495258, 0.0015431420322042121, 0.0018116443664951234, 0.002098593045199282, 0.0024017734825802096, 0.0027184985588092135, 0.003042640810208348, 0.003370967622440277, 0.003704527681687759, 0.004040991437184354, 0.004377848161045371, 0.004702609914305105, 0.005019392413569804, 0.005330816311191647, 0.005635258047286191, 0.00593149813499004, 0.0062107227922945756, 0.006471724243585883, 0.006722353819408974, 0.006961648410562781, 0.007189507119261108, 0.007405716391137748, 0.007609810801675901, 0.007802164668368517, 0.007982227030434063, 0.008150614553793184, 0.008296810058415056, 0.00842188474818472, 0.00853682728816598, 0.008641257542244185, 0.008736167074637018, 0.008821059675117187, 0.008896897983990843, 0.00896380975208713, 0.009022046249189765, 0.009072318953119954, 0.00910688306950973, 0.009127393023011514, 0.009141239658176816, 0.009149174481809968, 0.009151559757190212, 0.009148259496781948, 0.009140020091300858, 0.009126516090392911, 0.009108534202231903, 0.009086113178754032, 0.009054215073346052, 0.009013941305675838, 0.008970332796141714, 0.008924104675332011, 0.008875015775272246, 0.008823405192144737, 0.008769786750305368, 0.008713723291571211, 0.008655825882764133, 0.008595751052895655, 0.008530577619542913, 0.008460750431508573, 0.008389686676740274, 0.00831787852780863, 0.008244985263116194, 0.00817134920838428, 0.008096924627028625, 0.00802170633307638, 0.007946347955681289, 0.007870202671609034, 0.007791666314172819, 0.007710700924327505, 0.00762954857294255, 0.007548577054845537, 0.007467272202612019, 0.03348956021559059, 0.00730535405546257, 0.007224501701891887, 0.05386056553147557, 0.0070631304006224275, 0.006981919132212726, 0.006899499495965568, 0.0068177195336733155, 0.006736205888833273, 0.006654951290136835, 0.006574414648489003, 0.006493886462525614, 0.0064143702372844455, 0.006334940100354196, 0.006256200657286859, 0.006176278125790631, 0.006096510870771545, 0.006017759314469557, 0.011696673423093626, 0.01704819523097151, 0.006069213000652505, 0.005707561345910478, 0.005631567756753412, 0.009613835931499485, 0.00528045914329782, 0.004618016260079735, 0.004566670323321464, 0.004515271105405058, 0.0044642638184331195, 0.0044135418167485264, 0.004362761906853763, 0.004312428101575871, 0.004261788456968486, 0.0042112743074220835, 0.00416077297743442, 0.004110202476277547, 0.0040600086062819235, 0.004009527382686007, 0.003959396257357899, 0.003909079002991637, 0.00385886884454352, 0.003808877519555733, 0.0037587061220696262, 0.003708957924167479, 0.003658999148279733, 0.0036089731967014374, 0.0035586377647130137, 0.0035083491065884564, 0.0034584228729121294, 0.0034084427761705643, 0.003358865599095219, 0.0033092739109435083, 0.003259906287512039, 0.0032107519855223165, 0.003161640632561694, 0.0031128762027438535, 0.0030641569616242977, 0.0030157031428979485, 0.002967432448793876, 0.0029192700711277776, 0.0028713784189474158, 0.002823580031874912, 0.002776040210097496, 0.002728646619176843, 0.0026814161828652015, 0.002634250656687437, 0.002587029150681053, 0.002540031785780341, 0.0024932062999482576, 0.0024465359425760915, 0.0024001089418919496, 0.002353796651043317, 0.0023077166304392572, 0.0022617784147435944, 0.0022159578415175724, 0.0021703822436843693, 0.0021248870970861766, 0.00207962791643633, 0.0020344833907782124, 0.001989454230485813, 0.0019446225406868994, 0.00189983448147636, 0.0018552608455911935, 0.0018107338608428865, 0.0017663184124807252, 0.0017220088306088305, 0.0016776051264821624, 0.0016334983565341986, 0.0015893803711554762, 0.001545409782079861, 0.0015015411162356157, 0.0014576736906444065, 0.0014139897564245305, 0.0013702490364530557, 0.0013266696546713568, 0.0012831045818166484, 0.0012395747508327937, 0.001196157326942331, 0.001152593345302099, 0.0011092478618153915, 0.0010657932839107278, 0.001022406767574727, 0.000979067800499285, 0.0009356586274952573, 0.0008923836147052871, 0.000848939755914785, 0.0008056224446919476, 0.0007622620540807148, 0.000718923506950643, 0.0006757407303693216, 0.0006324311335173484, 0.0005894154625851824, 0.0005463247811958188, 0.000503417510891308, 0.00046055982161616695, 0.0004177171807929766, 0.00037513112414210313, 0.0003324454219168427, 0.0002902662591024239, 0.0002478348934249899, 0.00020614925732582117, 0.00016423644121397744, 0.00012155325281114647, 7.853516608899621e-05, 2.746961320876968e-05])
# fluence_0 = 2.53 * 10**8 # photon/cm^2
# fluence_0 = 9.93 * 10**8 # photon/cm^2


# angular (in radians) and positional spread (in cm)
angle_spread_x = 0
angle_spread_y = 0
angle_spread_z = 0

pos_spread_x = 0.01
pos_spread_y = 0.01
pos_spread_z = 0

angle_spread = (angle_spread_x,angle_spread_y,angle_spread_z)
position_spread = (pos_spread_x,pos_spread_y,pos_spread_z)

# densities
myArray2 = []
fo = open("lung_patient_python/lung_densities.egsphant", "r")
for line in fo:
    for nbr in line.split():
        myArray2.append(float(nbr))
densities = np.reshape(myArray2,[228,130,115],order='f').T
densities = coorform('z',densities)

print(np.shape(densities))

# file names for energy absorption coefficients
# filenames = ['energy_absorption_coeffs_air.txt','energy_absorption_coeffs_muscle_nodensity.txt','energy_absorption_coeffs_lung_nodensity.txt','rib_bone_coeffs.txt']
filenames = ['energy_absorption_coeffs_air.txt','energy_absorption_coeffs_muscle.txt','energy_absorption_coeffs_lung.txt','rib_bone_coeffs.txt']

# kernel info
kernelname_air = '../Topas/AirKernel.csv'
kernelname_muscle = '../Topas/MuscleKernel.csv'
kernelname_lung = '../Topas/Kernels/LungKernel2.csv'
kernelname_rib_bone = '../Topas/RibBoneKernel.csv'
kernelnames = [kernelname_air,kernelname_muscle,kernelname_lung,kernelname_rib_bone]
# kernelname = '../Topas/RealKernel1.csv'
kernel_size = (4,4,4) # cm 

# effective distance from center of kernel 
eff_dist = (2,2,2) # cm

# making materials array 
myArray = []
fo = open("lung_patient_python/lung_materials.egsphant", "r")
for line in fo:
    for nbr in line.split():
        for n in nbr:
            myArray.append(int(n))
            
materials = np.reshape(myArray[:],[228,130,115],order='f').T
materials = np.array(materials,dtype=int)-1
materials = coorform('z',materials)

print(np.shape(materials))

# number of cores to use
num_cores = 16

# Siddon((Nx,Ny,Nz),(dx,dy,dz),((x1,x2),(y1,y2),(z1,z2)),(xplane1,yplane1,zplane1),plot=True)
# terma = sd.TERMA((Nx,Ny,Nz),(dx,dy,dz),((x1,x2),(y1,y2),(z1,z2)),(xplane1,yplane1,zplane1),[beam_energy],[fluence_0],mu)

# dose = dc.Dose_Calculator((Nx,Ny,Nz),(dx,dy,dz),rays,(xplane1,yplane1,zplane1),beam_energy,fluence_0,angle_spread,position_spread,densities,filenames,kernelnames,kernel_size,eff_dist,materials,coeff_units='cm^-1',air_index=0)
dose = dc.Dose_Calculator((Nx,Ny,Nz),(dx,dy,dz),rays,(xplane1,yplane1,zplane1),beam_energy,fluence_0,angle_spread,position_spread,densities,filenames,kernelnames,kernel_size,eff_dist,materials,air_index=0)

pickle.dump(dose,open('lungpatient_2.pickle','wb'))
